plugins {
    id "base"
    id "java"
    id "idea"
    id "jacoco"
    id "io.freefair.lombok" version "${lombokPluginVersion}"
}

group = 'com.mrlonis'
version = "0.0.1-SNAPSHOT"

base {
    archivesName = "random-workspace"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

jacoco {
    toolVersion = "${jacocoVersion}"
}
def filesToExcludeFromCoverage = ["**/com/mrlonis/configuration/**",
                                  "**/com/mrlonis/controller/filters/**",
                                  "**/com/mrlonis/dto/**",
                                  "**/com/mrlonis/interfaces/**",
                                  "**/com/mrlonis/SpringBootProjectTemplateApplication.*"]

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: filesToExcludeFromCoverage)
        })
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: filesToExcludeFromCoverage)
        })
    }

    violationRules {
        rule {
            limit {
                minimum = 0.00
            }
        }
        rule {
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.00
            }
        }
    }

    mustRunAfter jacocoTestReport
}

tasks.named("test") {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs << "-Xlint:unchecked"
}

check {
    dependsOn jacocoTestCoverageVerification
}

build {
    dependsOn jacocoTestReport
}
